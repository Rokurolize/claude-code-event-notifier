[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-code-discord-notifier"
description = "Modular Discord notification system for Claude Code hooks with advanced thread management"
readme = "README.md"
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
dynamic = ["version"]

[tool.mypy]
python_version = "3.13"
mypy_path = ["src"]
strict = true
show_error_codes = true
pretty = true

# Simple architecture needs to handle JSON and uses relative imports
[[tool.mypy.overrides]]
module = ["src.simple.*"]
ignore_missing_imports = true  # Allow relative imports
warn_return_any = false  # JSON operations return Any

# External libraries without stubs
[[tool.mypy.overrides]]
module = ["urllib.*", "sqlite3.*", "json.*"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py313"
line-length = 120

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
# Linus Torvalds style: "Keep it simple"
select = [
    "E",     # pycodestyle errors
    "F",     # pyflakes (actual errors)
    "I",     # isort (import sorting)
    "UP",    # pyupgrade (use modern Python)
]

ignore = [
    # Not errors, just style
    "E501",    # Line too long (formatter handles this)
    "E712",    # Comparison to True/False (works fine)
    
    # Python version checks are intentional
    "UP036",   # Version blocks (we check Python 3.13+)
    
    # Import sorting in simple architecture
    "I001",    # Import sorting (relative imports are OK)
    
    # Logging with f-strings is fine
    "G004",    # f-strings in logging
    
    # CLi tool patterns
    "T201",    # print() is OK for CLI tools
    "S101",    # assert is OK for validation
    "S110",    # try-except-pass is OK for optional features
    "S607",    # Starting subprocess with partial path
    "BLE001",  # Catching Exception is OK for CLI
    
    # Complexity (working code > perfect code)
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments  
    "PLR0915", # Too many statements
    "PLW2901", # Loop variable overwritten
    
    # Type checking imports
    "TC002",   # Move into TYPE_CHECKING block
    "PLC0415", # Import at module level
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "S101",    # Use of assert detected (needed for tests)
    "ANN201",  # Missing return type annotation (test functions)
    "ANN001",  # Missing type annotation for function argument
    "D103",    # Missing docstring in public function (test functions)
    "PLR2004", # Magic value used in comparison (test values)
    "SLF001",  # Private member accessed (needed for testing internals)
]
"configure_hooks.py" = [
    "T201",    # Print found (CLI tool output)
    "PLR0913", # Too many arguments (configuration functions)
]
"src/main.py" = [
    "T201",    # Print found (CLI tool output)
    "PLR0913", # Too many arguments (Discord API functions)
    "PLR0912", # Too many branches (event processing logic)
]
"src/thread_storage.py" = [
    "PLR0913", # Too many arguments (SQLite operations)
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-type-checking]
# Enable automatic TYPE_CHECKING imports - Python 3.14+ standard library only
runtime-evaluated-base-classes = ["typing.Protocol"]
strict = true

[tool.pytest.ini_options]
testpaths = [".", "src"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--tb=short", 
    "--strict-markers",
    "--strict-config",
    "--show-capture=no",
    "--disable-warnings",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=85",
    "-x",  # Stop on first failure for faster feedback
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests (require network)",
    "unit: marks tests as unit tests (no network, fast)",
    "type_safety: marks tests as type safety validation tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "test_*.py",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/.*",
    "*/conftest.py",
    "*/setup.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "# pragma: no cover",
]
show_missing = true
skip_covered = false
precision = 2
sort = "Cover"

[tool.setuptools]
py-modules = ["configure_hooks"]

[tool.setuptools.packages.find]
where = ["src"]

[project.optional-dependencies]
dev = [
    # Type checking - latest for Python 3.13+ support
    "mypy>=1.16.1",
    
    # Linting and formatting - latest with all rule categories
    "ruff>=0.12.2",
    
    # Testing framework - latest stable with modern features
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    
    # Additional development tools for quality assurance
    "pytest-xdist>=3.6.0",  # Parallel test execution
    "pytest-mock>=3.14.0",  # Enhanced mocking capabilities
    
    # Python 3.13+ only - no external dependencies required
]

[tool.setuptools_scm]
version_scheme = "guess-next-dev"
local_scheme = "dirty-tag"
