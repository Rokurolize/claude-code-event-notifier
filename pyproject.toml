[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-code-discord-notifier"
description = "Single-file Discord notifier for Claude Code hooks"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
dynamic = ["version"]

[tool.mypy]
# Basic configuration
mypy_path = ["src"]
python_version = "3.12"
strict = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
no_error_summary = true

# Type checking behavior
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_subclassing_any = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true
strict_equality = true
disallow_any_explicit = true
disallow_any_expr = true

# Error reporting
show_traceback = true
raise_exceptions = true

# Module-specific overrides for JSON handling
[[tool.mypy.overrides]]
module = [
    "src.discord_notifier",
    "configure_hooks",
]
# Be more lenient with JSON parsing functions
disallow_any_expr = false
disallow_any_explicit = false
# But still enforce strict typing elsewhere
strict_optional = true
warn_return_any = true

# Allow untyped definitions only for specific JSON utility functions
[[tool.mypy.overrides]]
module = "src.type_guards"
disallow_untyped_defs = false  # Only for type guard functions

# External library stubs
[[tool.mypy.overrides]]
module = "urllib.*"
ignore_missing_imports = true

[tool.ruff]
target-version = "py312"
line-length = 120

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
ignore = [
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D107",    # Missing docstring in __init__
    "S101",    # Use of assert detected
    "T20",     # Print statements (allowed in this CLI tool)
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # String concatenation (conflicts with formatter)
    "PLR2004", # Magic value used in comparison (reasonable for HTTP codes)
    "TRY003",  # Avoid specifying long messages outside exception class
    "EM101",   # Exception must not use string literal
    "EM102",   # Exception must not use f-string literal
]

select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PERF",  # perflint
    "RUF",   # ruff-specific
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "S101",    # Use of assert detected (needed for tests)
    "ANN201",  # Missing return type annotation (test functions)
    "D103",    # Missing docstring in public function (test functions)
    "PLR2004", # Magic value used in comparison (test values)
]
"configure_hooks.py" = [
    "T201",    # Print found (CLI tool output)
]
"src/discord_notifier.py" = [
    "T201",    # Print found (CLI tool output)
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-type-checking]
# Enable automatic TYPE_CHECKING imports
runtime-evaluated-base-classes = ["typing_extensions.Protocol"]
strict = true

[tool.pytest]
testpaths = [".", "src"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "test_*.py",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.setuptools]
py-modules = ["configure_hooks"]

[tool.setuptools.packages.find]
where = ["src"]

[project.optional-dependencies]
dev = [
    "mypy>=1.16.1",
    "ruff>=0.12.2",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]

[tool.setuptools_scm]
version_scheme = "guess-next-dev"
local_scheme = "dirty-tag"
